@page "/developer/type/list"
@inject AppDbContext _appDbContext
@inject IJSRuntime _jsRuntime

<PageTitle>DeveloperTypeList Page</PageTitle>

<style>
    table, tr, th, td {
        border: 1px solid; 
    }

    td {
        text-align: center;
    }
</style>

<a class="btn btn-primary" href="/developer/type/add">Add developer type</a>
<hr />
@if (DeveloperTypes is null)
{
    <h3>Loading developer type list ...</h3>
    return;
}
<table class="table btn-light">
    <tr>
        <th>Number</th>
        <th>Name</th>
        <th>Developer</th>
        <th>Edit</th>
        <th>Delete</th>
    </tr>
    @{
        int i = 1;
        foreach (var developerType in DeveloperTypes)
        {
            <tr>
                <td>@(i++)</td>
                <td><a href="/developer/list/@developerType.Id">@developerType.Name</a></td>
                <td>@developerType.Description</td>
                <td><a class="btn btn-outline-warning" href="/developer/type/edit/@developerType.Id">edit</a></td>
                <td><a class="btn btn-outline-danger" @onclick="(e)=>DeleteAsync(developerType.Id)">delete</a></td>
            </tr>
        }
    }
</table>

@code {

    protected override void OnInitialized()
    {
        DeveloperTypes = _appDbContext.DeveloperTypes.ToList();
        StateHasChanged();
    }

    List<DeveloperType> DeveloperTypes = null;

    async void DeleteAsync(Guid id)
    {
        bool res = await _jsRuntime.InvokeAsync<bool>("confirm", "Haqiqatdan ham ushbu sohani o'chirmoqchimisiz?");
        if (!res)
            return;
        _appDbContext.DeveloperTypes
            .Where(x => x.Id == id)
            .ExecuteDelete();
        await _appDbContext.SaveChangesAsync();
        OnInitialized();
    }
}
